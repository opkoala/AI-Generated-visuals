import numpy as np
import matplotlib.pyplot as plt
from pydub import AudioSegment
import librosa

from flask import Flask, render_template, request, url_for, redirect, send_file, session
from pytube import YouTube
from io import BytesIO

app = Flask(__name__)
app.config['SECRET_KEY'] = "654c0fb3968af9d5e6a9b3edcbc7051b"

@app.route("/", methods=["GET", "POST"])
def home():
    if request.method == 'POST':
        session['link'] = request.form.get('url')
        try:
            url = YouTube(session['link'])
            url.check_availability()
        except:
            return render_template("error.html")
        return render_template("download.html", url=url)
    return render_template("home.html")

@app.route("/download", methods=["GET", "POST"])
def download_audio():
    if request.method == "POST":
        buffer = BytesIO()
        url = YouTube(session['link'])
        audio = url.streams.get_audio_only()
        audio.stream_to_buffer(buffer)
        buffer.seek(0)

        # Audio visualization code
        audio_segment = AudioSegment.from_file(buffer)
        audio_data = np.array(audio_segment.get_array_of_samples())
        sample_rate = audio_segment.frame_rate

        CHUNK = 1024  # Number of samples per chunk

        plt.ion()  # Turn on interactive mode
        fig, ax = plt.subplots()
        x = np.arange(0, CHUNK)  # x-axis for the plot
        line, = ax.plot(x, np.zeros(CHUNK))
        ax.set_xlim(0, CHUNK)
        ax.set_ylim(-1, 1)  # Adjust based on your audio input range

        # Start playing the audio
        audio_segment.export("temp_audio.mp3", format="mp3")  # Export the audio to a temporary file
        audio_player = AudioSegment.from_file("temp_audio.mp3")
        audio_player.export("temp_audio.wav", format="wav")  # Convert the audio to WAV format
        audio_data, _ = librosa.load("temp_audio.wav", sr=sample_rate)

        for i in range(0, len(audio_data), CHUNK):
            # Update the plot with the new audio signal
            audio_signal = audio_data[i:i+CHUNK]
            line.set_ydata(audio_signal)
            fig.canvas.draw()
            fig.canvas.flush_events()

        # Stop playing the audio
        audio_player.stop_playing()

        plt.close(fig)

        # Clean up temporary files
        os.remove("temp_audio.mp3")
        os.remove("temp_audio.wav")

        return send_file(buffer, as_attachment=True, download_name="Audio - YT2Audio.mp3", mimetype="audio/mpeg")
    
    return redirect(url_for("home"))

if __name__ == '__main__':
    app.run(debug=True)
